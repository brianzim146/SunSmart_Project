// This #include statement was automatically added by the Particle IDE.
#include <AssetTracker.h>

// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_VEML6070.h>

// assign SETUP button's pin
int button = BTN;
Adafruit_VEML6070 uv = Adafruit_VEML6070();

#define mySerial Serial1
// Adafruit_GPS GPS(&mySerial);

int alert = D3;

String temp = "";
int i = 0;
int count = 0;
double baddata = 10.0;
double sum = 0.0;
String data = "";
String lat = "";
String lon = "";
int aggUV[12] = {};
String apiKey = "Z2vmC6XW0t4nXhhC96cc5KNJDyQrdbLa";
String deviceId = "270025001847343438323536";

String allData[144] = {};
int offline_iterator = 0;

// SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);

AssetTracker locTracker = AssetTracker();

void executeStuff() {
    locTracker.updateGPS();
}

Timer stateMachineTimer(10, executeStuff);

// Setup 
void setup() {
    pinMode(alert, OUTPUT);
    Serial.println("turning on WiFi");
    WiFi.on();
    WiFi.setCredentials("Good Internet_EXT", "qwwlt37278");
    Serial.println("WiFi connecting");
    WiFi.connect(WIFI_CONNECT_SKIP_LISTEN);
    Serial.println("Particle connecting");
    Particle.connect();
    uv.begin(VEML6070_4_T);
    
    // Setup serial port
    Serial.begin(9600);
    // Setup pin mode for button https://build.particle.io/build/59fffa41e6eed094bd001039#save
    pinMode(button, INPUT);
    
    locTracker.begin();
    locTracker.gpsOn();
    
    // Setup webhook subscribe
    Particle.subscribe("hook-response/uvgpsPost", uvgpsHandler, MY_DEVICES);
    stateMachineTimer.start();
}
// main loop
void loop() {
    // read button and if it is pressed
        // Construct json string
    if(count == 10){
        lat = String(locTracker.readLat()/100.0);
        lon = String(locTracker.readLon()/-100.0);
        for(i = 0; i < 10; i++){
            if(aggUV[i] != 65535){
                sum = sum + aggUV[i];
            }
            else{
                baddata--;
            }
        }
        sum = sum/baddata;
        temp = String(sum);
        
        if (sum > 500) { // alert for high UV radiation readings - blink an LED
            digitalWrite(alert, HIGH);
            delay(500);
            digitalWrite(alert, LOW);
        }
        
        data = String("{ \"apiKey\": \""+ apiKey + "\", \"deviceId\": \""+ deviceId + "\", \"longitude\": \""+ lon + "\", \"latitude\": \"" + lat + "\", \"uv\": \"" + temp + "\" }");
        
        
        allData[offline_iterator] = data;
        offline_iterator++;
        if (offline_iterator >=144) { // clear arrays after 24 hours offline
            offline_iterator = 0;
            memset(allData, 0, 144);
        }
        
        if (WiFi.ready()) { // wifi  connected
            Serial.println(" wifi ready "); 
            for (int i = 0; i < offline_iterator; i++) {
                
                
                Serial.println("Satellites: " + String(locTracker.getSatellites()));
                Serial.println("Fix Quality: " + String(locTracker.getFixQuality()));
                Serial.println("Fix: " + String(locTracker.gpsFix()));
                Particle.publish("uvgpsPost", allData[i], PRIVATE);
                Serial.println(allData[i]);
            }
            memset(allData, 0, 144);
            offline_iterator = 0;
        } else { // wifi not connected
            WiFi.listen();
            delay(1000);
            WiFi.listen(false);
            Serial.println(" wifi not ready ");
            Serial.println("number of saved values: " + String(offline_iterator));
            WiFi.clearCredentials();
            WiFi.setCredentials("Good Internet_EXT", "qwwlt37278");
            Serial.println("WiFi connecting");
            WiFi.connect(WIFI_CONNECT_SKIP_LISTEN);
            Serial.println("Particle connecting");
            Particle.connect();
        }
        
        // Particle.publish("gpsdata", gdata, PRIVATE);
        // Serial.println();
        // Serial.println(gdata);
        // Serial.println("Satellites: " + String(locTracker.getSatellites()));
        // Serial.println("Fix Quality: " + String(locTracker.getFixQuality()));
        // Serial.println("Fix: " + String(locTracker.gpsFix()));
        // Particle.publish("uvdata", udata, PRIVATE);
        // Serial.println(udata);
        
        sum = 0.0;
        count = 0;
    }
    
    aggUV[count] = uv.readUV();
    
    // delay .5 second to block continuous input
    count++;
    Serial.println(count);
    delay(60000);
}
// When obtain response from the publish
void uvgpsHandler(const char *event, const char *data) {
  // Formatting output
  String output = String::format("Response from Post:\n  %s\n", data);
  // Log to serial console
  Serial.println(output);
  Serial.println(event);
}